Chapter - 7
==============
## 52 ## Object Literal vs Constructor

There is no assosiative array in JavaScript. Object acts like assosiative array in JavaScript.

Object Literal:
> Code:
  var obj1 = {
    name: 'Shahbaj',
    roll: 1001,
    gpa: 3.5
  };
  obj1.gpa = 3.25;
  console.log(obj1);

> Output:
  { name: 'Shahbaj', roll: 1001, gpa: 3.25 }

Object Constructor:
> Code:
  var obj2 = new Object();
  obj2.name = "Shahbaj";
  obj2.roll = 1001;
  obj2.gpa = 3.25;
  console.log(obj2);

> Output:
  { name: 'Shahbaj', roll: 1001, gpa: 3.25 }



## 53, 54 ## Accesing and Updating Object Properties in Javascript
> Code:
  var point = {
    x: 10,
    y: 20,
    z: 30,
  };

  // #### Dot Notation ####
  point.x = 12; // Assignment(Updating) of the value of property 'x' from 'point' object
  console.log(point.x); // Printing the value of property 'x' from 'point' object
  console.log(point.x + point.y); // Doing Arithmetic Operation

  // #### Array Notation ####
  console.log(point["z"]); // Printing

  var letter = "y";
  console.log(point[letter]); // Printing

  point["x"] = 77; // Assignment(Updating) with Array Notation Method
  console.log(point["x"]); // Printing

> Output:
  12
  32
  30
  20
  77


## 55 ## Remove Object Properties in Javascript
> Code:
var point = {
  x: 10,
  y: 20,
  z: 30,
};
delete point.x;
console.log(point);

> Output:
{ y: 20, z: 30 }




## 56 ## How to Compare Two Objects in Javascript

Wrong Method of comparing two objects :-
> Code:
  var obj1 = { x: 10, y: 20 };
  var obj2 = { x: 10, y: 20 };
  console.log(obj1 == obj2); // Here the location objects are compared, and the locations of two objects are always different. Thats why it returns false.

> Output:
  false

The Right way of comparing two objects :-
> Code:
  var obj1 = { x: 10, y: 20 };
  var obj2 = { x: 10, y: 20 };
  console.log(obj1.x == obj2.x && obj1.y == obj2.y);

> Output:
  true

Another Method of comparing two objects :-
> Code:
  var obj1 = { x: 10, y: 20 };
  var obj2 = { x: 10, y: 20 };
  console.log(JSON.stringify(obj1) == JSON.stringify(obj2)); // Here the objects are converted into strings. Then when we compare the string version of obj1 and obj2 it becomes equal and returns true.
  
> Output:
  true




## 57 ## How to Iterate Object Properties in Javascript

> Code:
  var obj1 = { x: 10, y: 20 };

  console.log("x" in obj1); // true
  console.log("p" in obj1); // false

  for (var i in obj1) {
    console.log(i); // Here the i is "x", "y" for 1st & 2ns loop respectively
    console.log(i + ": " + obj1[i]);
  }

> Output:
  true
  false
  x    
  x: 10
  y    
  y: 20


## 58 ## Object Methods Provided by Javascript
Some basic level Object methods:-
> Code:
var obj1 = { x: 10, y: 20, z: 30 };

console.log(Object.keys(obj1)); // [ 'x', 'y', 'z' ]
console.log(Object.values(obj1)); // [ 10, 20, 30 ]
console.log(Object.entries(obj1)); // [ [ 'x', 10 ], [ 'y', 20 ], [ 'z', 30 ] ]

> Output:
[ 'x', 'y', 'z' ]
[ 10, 20, 30 ]
[ [ 'x', 10 ], [ 'y', 20 ], [ 'z', 30 ] ]

Some other methods to solve some complicated problems:-
**** The Problem ****
> Code:
  var obj1 = { x: 10, y: 20, z: 30 };
  var obj2 = obj1;
  console.log(obj1, obj2); // { x: 10, y: 20, z: 30 } { x: 10, y: 20, z: 30 }

  obj2.x = 13;
  obj2.y = 88;
  // When I change the property of obj2 it will automatically change the value of obj1. Because they are in the same location. Like objects, arrays also behave the same. Because arrays are also object type.
  console.log(obj1, obj2); // { x: 13, y: 88, z: 30 } { x: 13, y: 88, z: 30 }

> Output:
  { x: 10, y: 20, z: 30 } { x: 10, y: 20, z: 30 }
  { x: 13, y: 88, z: 30 } { x: 13, y: 88, z: 30 }

**** The Solution ****
> Code:
  var obj1 = { x: 10, y: 20, z: 30 };
  var obj2 = Object.assign({}, obj1);
  console.log(obj1, obj2); // { x: 10, y: 20, z: 30 } { x: 10, y: 20, z: 30 }

  obj2.x = 13;
  obj2.y = 88;
  console.log(obj1, obj2); // { x: 10, y: 20, z: 30 } { x: 13, y: 88, z: 30 }

> Output:
  { x: 10, y: 20, z: 30 } { x: 10, y: 20, z: 30 }
  { x: 10, y: 20, z: 30 } { x: 13, y: 88, z: 30 }


